def analyse(x):
    if type(x) is list: #если тип передаваемой переменной list
        for i in range(len(x)):
            if type(x[i]) is tuple and type(x[i][0]) is str and type(x[i][1]) is int: #если содержимое списка - кортежи из пары строка, число
                RUN = True #переменная для записи результата проверок начальных условий
            else:
                RUN = False
                print('Неверный тип передаваемой переменной.')
                break
        if RUN:
            y = list(set(x)) #записываем в переменную у уникальные кортежи из списка х
            if len(y) < len(x):
                print('Не может быть ящиков с одинаковыми номерами!')
                RUN = False
            else:
                nums = [] #список для хранения номеров ящиков, номера не уникальны, т.к. записываются и номера поступающих ящиков и выгружающихся
                for i in range(len(x)):
                    nums.append(x[i][1])
                for i in range(len(x)):
                    if x[i][0] == 'выгрузить':
                        if nums.count(x[i][1]) < 2: #если при выгрузке количество номеров ящика в списке меньше двух, т.е. не было записи номера при загрузке
                            print('Выгружаемый ящик должен находиться на складе в момент отгрузки!')
                            RUN = False
                            break
    else:
        RUN = False
        print('Неверный тип передаваемой переменной.')
    if RUN: #если все условия были выполнены
        warhouse = list()
        n = 0 #переменная-счетчик искомой энергии
        for i in range(len(x)):
            if x[i][0] == 'принять':
                if nums.count(x[i][1]) != 1: #если ящик необходимо и загрузить и выгрузить, он загружается на выход
                    warhouse.insert(0, x[i][1])
                n += 1
            elif x[i][0] == 'выгрузить':
                k = warhouse.index(x[i][1]) #количество ящиков в очереди перед выгружаемым
                n += 2 * k + 1
        print(n)
        return n
    else:
        return None

# analyse([
# ('принять', 46),
# ('выгрузить', 46),
# ('принять', 21),
# ('выгрузить', 21),
# ])
# analyse('s')
# analyse([
# ('принять', 1),
# ('принять', 2),
# ('выгрузить', 1),
# ('принять', 3),
# ('принять', 4),
# ('выгрузить', 3),
# ])
# analyse([
# ('принять', 1),
# ('принять', 21),
# ('выгрузить', 1),
# ('выгрузить', 21),
# ])
